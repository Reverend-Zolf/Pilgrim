  Stack / Heap Memory
- At a basic level, both just store data
The main differences are: 
    Size of available memory (Heap Wins)
    The way memory is found/allocated
    Speed of memory allocation (Stack Wins in general)
    Stack memory deallocated when leaves scope


Example Allocations

int main(){
    int var = 7; //stack
    int* hvar = new int; //heap
    *hvar = 5 ;
   // delete hvar;
}



Stack Memory

- Stack known as 'static memory'
- All stack memory allocation sizes need to be known at compile time
- Memory allocation which depends on runtime variables (dynamic memory size) must be heap allocated

Heap Memory

- Much more space available
- Alloc via the 'new'  (Type * varName = new Type; )
- Calls C malloc under the hood
- OS find a contigous chunk of memoryand ruturns a pointer to it

Stack = fast, limited
Heap = slow, large

Pointers

- A poiter stores a memory address
- Modifying the pointer variable modifies the address it points to
- To modify the value of the data in memory that it points to, we dereference

deference is modify the house